
test case
A test case is a specific set of steps or instructions or specific inputs that can be used to test a particular function or feature of a software application. 
It usually includes the input values and expected results when after running a test.
a test case is a collection of conditions under which a tester will determine whether the application behaves as expected.

test scenario
a test scenario is a high-level description of how a particular function or feature of an application should work. 
It usually includes a general description of the steps that should be followed to test the function or feature and the expected results. 
 a test scenario is a description of the steps a tester would take to verify that an application works as expected.


Test case document:
-------------------
what are the columns required for the TC doc.


common info for all test cases:
------------------------------------------
->Project Name with version
->Module name 
->Created by -> tester name 
->Created date -> date of creation
->approved by  -> Testing lead
-> last updated date  -> when is the last change happened.
-> Type of testing -> system/perf/load


Every test case has :
------------------------
1.Test case#number 
FC3.6_620_B_T1
2.Test case description 
-> what is the test case abt (one liner)
	ex:
	1.login success with valid creds.
	2.login faillure with Invalid creds. 
3.Screen Name/funtion: on which page/module the test case has to be executed.
Login screen
4.Assumptions: 
may be yes/no .
for login , assumption user is already registerd and active.
5.pre-conditions:
valid url
login screen to open.
login screen should show login name + pwd with submit button.
6.Test steps: 
step by step actions to be performed on the page.
->open www.fb.com
->under username enter "admin"
->under password enter "admin123"
->click on "submit" button

7.Test data 
"admin"
"admin123"


8.post conditions(optional)
-> backend services/db are in place.
-> db test to chek whether the dates are updated in table.


9.expected result- ;[ how you expect the app to behave. ]
home page should be shown for the loggedin user.


10.actual result(observation)-[ how app is behaving ]
home page is displayed for the logged-in user.

11.status -
Update as  SUCCESS if 9 and 10 are matching
Update as  FAIL if 9 and 10 are NOT matching.

12.executed by : TESTER NAME 

13.defect id:
create defect in defect tracking tool(ex: jira) if 9 and 10 are not matching.
and share the defcet number to track the status.

14.comments : add any comments if required.

15.script id:
the automation script name for this test case.
16.create/modified date :last date

1-9 to be filled before testing.
10-16 to be filled during testing.


Requirement :
BR#1:
------
-> 1.1 Introduce new screen for Login.
-> 1.2 Provide app name in the top
-> 1.3 In the page body provide a form :
  a) Form to contain  username label + text field for filling username
  b) Form to contain  password label + text field for filling password
  c) Form to contain Login button
-> 1.4 For successfull login show message as "login success".
-> 1.5 For failure login show message as "login failure".


Tasks:
->Analysis
->Prepare Test case 
->Review the test cases .
->Perform testing.

 

requirements-traceability-matrix document:
-------------------------------------------
- Document for mapping the requirement with test cases.
- collets all requirements and for every reuirement what are the test cases ids's.

 
Final BR#1 after queries:
------
-> 1.1 Introduce new screen for Login.
-> 1.2 Provide app name in the top
-> 1.3 In the page body provide a form :
  a) Form to contain  username label + text field for filling username
  b) Form to contain  password label + text field for filling password
  c) Form to contain Login button
-> 1.4 For successfull login show message as "login success".
-> 1.5 For failure login show message as "login failure".
1.6 If user name is empty then this screen should show a pop up menu asking "please enter user name". This is a client's side validation.
1.7 If password is empty then this screen should show a pop up menu asking "please enter password". This is a client's side validation.




test scenarios:
---------------
1.Login success
2.Login failure
3.Security Login 





Sample Login screen test cases:
-------------------------------
1. Positive Login Page Test Cases
Positive test cases are test cases that follow the “happy path” i.e. testing if the Login page functions as expected under valid inputs. These test cases explore scenarios where users do what they are supposed to do, such as:

Valid username and password combination successfully logs the user in.
Testing with the minimum allowed username and password length.
Testing with a username and password containing alphanumeric characters.
Successful login with the "Remember Me" option selected.
Testing login with a username that contains both uppercase and lowercase characters.
Successful login using a valid email address as the username.
Successful login using a valid phone number as the username.
Successful login with multi-factor authentication (MFA) enabled.
Testing login with a username that includes special characters (e.g., @, #, $).
Successful login using social media accounts (if applicable).
Successful login using biometric authentication (e.g., fingerprint, face recognition).
Testing login after a password reset to ensure the new password works.
Successful login after an account recovery process.
Successful login with localization settings (testing with different languages).
Testing login with different browsers (e.g., Chrome, Firefox, Edge).






Negative Login Page Test Cases
In contrast, negative testing for the Login page aims to explore scenarios that deviate from that “happy path”. Users don’t always do what we want them to do. Sometimes they do unexpected things, and a good tester understands that unpredictability to test accordingly. Some common negative test cases you should test on your Login page include:

​​Entering an incorrect password for a valid username.
Entering an incorrect username for a valid password.
Entering an empty username field.
Entering an empty password field.
Entering a username that does not exist in the system.
Entering a password that does not meet password strength requirements.
Testing login with excessive length usernames and passwords.
Testing login with incorrect case (uppercase/lowercase) in the username.
Testing login with expired or deactivated user accounts.
Testing login with suspended user accounts.
Multiple consecutive failed login attempts triggering an account lockout.
Testing login after the session has expired due to inactivity.
Testing login with incorrect multi-factor authentication (MFA) codes.
Entering invalid characters (e.g., scripts) in the username or password fields.
Testing login with CAPTCHA validation failure.




UI Test Scenarios
Verify that all the controls including text-boxes, buttons, and links are present on the Login page.
Verify that the font specifications of the labels and the text written on the different elements should be clear.
Verify that the size, color, and UI of the different elements are as per the specifications. 
Verify that the application’s UI is responsive i.e. it should adjust to different screen resolutions and devices.

Verify that as soon as the login page opens, by default the cursor should remain on the username textbox.
Verify that the user is able to navigate or access the different controls by pressing the ‘Tab’ key on the keyboard.
Verify that the password is in masked form when entered.
Verify if the password can be copy-pasted or not.
Verify that the user is able to login by entering valid credentials and clicking on the ‘Login’ button.
Verify that the user is able to login by entering valid credentials and pressing Enter key.
Verify that the user is not able to login with an invalid username and password.
Verify that the validation message gets displayed in case the user leaves the username or password field as blank.
Verify that the validation message is displayed in the case the user exceeds the character limit of the user name and password fields.
Verify that reset button functionality on the login page. Clicking on it should clear the textbox’s content.
Verify if there is a checkbox with the label “remember password” on the login page.
Verify that closing the browser should not log-out an authenticated user. Launching the application should lead the user to login state only.


