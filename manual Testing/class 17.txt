Functional testing:
------------------
->Test New Features (using test cases)
-> Database testing
-> Test Defects  (ReTesting )
-> Before Regression perform sanity + smoke
-> Regression  [just before the delivery]
-> Non Funtional Testing.
-> User Acceptance Testing  (customer)


coverage/guidelines/testing techniques under functional testing:
------------------------------------------
Software Testing Techniques help you design better test cases.
Manual Testing Techniques help reduce the number of test cases to be executed while increasing test coverage. 
They help identify test conditions that are otherwise difficult to recognize.


a)Boundary Value analysis:[BVA]
b)Equivalence class partitioning (ECP)
c)decision table based testing
d)state transition
e)Object Properties testing:
f)Error handling/coverage testing:
g)calculation /manipulation testing:
h)Links coverage:
i)Internationalization  testing


input domain coverage (BVA, ECP)
cookies and sessions -> NA
I18N testing (currancy change)
localization testing (testing particular location 
ex: currancy change
    chnage the date + time format
	collect id (voter id or ssn)
	
	
	
coverage/guidelines under functional testing:
------------------------------------------
a)Object Properties testing:
In web page everything is an object
And every object has properties[data type] and behaviour
Every obj has certain properties
ex:
in a Registration page 
username textbox , 
password field, 
state dropdown.
city dropdown
 

text box is an obj.
properties of textbox: enable + disable + size + isdisplayed
behaviour : onchange , onclick  


 password is object
 properties:
 - not visible + 
 -  size + isdisplayed +onchange
 
 behaviour :
  onchange , onclick  

1.on page open un + pwd is enabled.

state dropdown obj -> if we change state then city dropdown changes...
city dropdown obj ->  shows cities based on state selected

2.password should not be visible.
3.on state change + city also changes.

During  functional testing tester has to validate the properties of every object at run time.

age is a number and app should not even allow to enter any other chars except digits




b)Error handling/coverage testing:
applicable for only for negative scenario.
- Test with 
  a) empty/size/alpah/splchar/digits/alphaNumeric data
  b) invalid data
  c) existing data   (register)
  d) non-existing data  (login )
  
- validate The error message shown by the app is as expected

 

ERRORS:
->when db is down , 
->when app is crashed.
->When 3rd party app is down

verify:
1.flow is stopped.
2.the app should throw meaningful messages.

In all these cases the app should throw meaningful messages.

Rules for tester
-> tester has to provide  all possible invalid data and check how the application is behaving for every page.
-> test the error message displayed to customer.
-> Test the expected erorr message has to be displayed on the screen.
-> test the app should give meaningful message.
	ex: 
	1."Please enter valid password"   
	--Not a meaning error message
	2."Password should be min 5 chars and max 10 chars".
	-- meaning full message.
	
    3.
	"LoginName Not accepted." --Not a meaning error message
	 "LoginName is already in use"   -- meaning full message.
	 "LoginNameshould be min 5 chars and max 10 chars"   -- meaning full message.
	 

Approach:
[Provide invalid data +
 test how app responds  +  
 what is the message + 
 is the message meaningful?]
	
	
c)calculation /manipulation testing:
------------------------------------
Used mostly in the cases where mathematical calculations are applicable.

Approach:
1.provide some values to the page
2.Process the activity [add items, checkout ]
3.compare the output from the page with the expected value.

CASE#1:
CLOTHING - 50%
Groceries - 0%


c1 - 100
c2 - 200
c3 - 300

g1 - 400
g2 - 500
g3 - 600

expected :1800

CASE#2:
Transaction (debit + credit) 
check the final balance for both accounts before and after the transaction
Assume user1 transfer 1000 to user2

BEFORE:
USER1 : 6000
USER2 : 9000

AFTER:
USER1 : 5000
USER2 : 10000

CASE#3:
Add products to cart.
In final bill the total amount to be paid = sum of prices of all products 
+ additionally apply any discount + coupons + taxes ===> final price.
ex: financial , banking , ecommerce.

d)Links coverage:
------------------
-applicable for the web applications.
-application has links as agreed by business.

what should be covered:
Test link , button for any navigations to back-end

Tests to cover:
- check if the expected links are displayed on the page.
- check if the links are displayed at correct place(layout/position) with valid text.
- check unnecessary links should not show on page
ex: on home we would expect login + register 
- check if the links are working ? 
- navigating to the target page as expected , but not to external pages.

- Links can be internal or external .
-> links of same app
-> links to 3rd parties


Input domain testing:
----------------------
For a given input field tester has to validate the data provided to the field
w.r.t. value and length.

EX:
user name allows only alphabets   [value ]
user name size is 6 to 8       [lenth] , range 

we should test both +ve and -ve cases
for +ve data => app should allow
for -ve data => app should not allow

we have two techniques for testing above requirement.
 = > Equivalence class partition   - Value check
 = > Boundary value analysis.    - Length check

focus is on the coverage but on the number of test cases.

BVA for username : refer the diagram
ECP for username : refer the diagram

e)Boundary Value analysis:[BVA]- LENGTH/range
------------------------------
Boundary value analysis is based on testing at the boundaries between partitions. 
It includes maximum, minimum, inside or outside boundaries, typical values and error values.
BVA is used when the requirement has boundaries for testing.

steps:
---------
1.define the minimum 
2.define the maximum 
3.testcases are:
min-1 , min , min+1
max-1, max, max+1


Ex1:
Input condition is valid between 1 to 10
min = 1
max = 10 

Boundary values 0,1,2 and 9,10,11


Ex2: 
UserName should be between 6 chars and max 10 chars.


min =6
max= 10
  Username(6-10)    status
  ---------        --------
1. 5                  F   
2. 6                  P
3. 7                  P
4. 9                  P
5. 10                 P
6. 11                 F 

f)Equivalence class partitioning (ECP):- Value
---------------------------------
Equivalent Class Partitioning allows you to divide set of test condition into a partition
 which should be considered the testing. 
This software testing method divides the input domain of a program into classes of data 
from which test cases should be designed.
 
Case#1:
username field allows only lower case.

VALID : [a-z]  
        ex:kumar
Invalid : 1. [A-Z] capitals
                ex:KUMAR   
          2. [0-9] digits
                ex: 123445
          3. [.!@#$%^&*()_+...etc] special characters
               ex:*&*&*&:>?<{}+
          4.alphanumeric
               ex: aAbHJhjhflbg!@#$%123434     
               

Case#2:
username allows only alphabets only capitals allowed.  

only alphabets + lower case - InValid  -> user
only alphabets + upper case - Valid  -> USER
only digits  - Invalid -> 1213
special chars - Invalid -> &&%$
alpha numeric


Case#3:
-For account page only admin has access.


There are 4 types of users :
ADMIN ,AGENT, CUSTOMER, RETAILER.



test cases:
1.Access as ADMIN
2.Access as AGENT
3.Access as CUSTOMER
4.Access as RETAILER
5.Access as invalid user


summary:


1.MobileNum should be exactly 10 digits ->  -> USE BVA + ECP
testcases :
 1. 9 digits
 2. 10 digits 
 3. 11 diguts 
 4. 10 alphabets 
 5. 10 spcl chars 
 6. 10 alpha numeric 
 
2.username allows 6 - 8 Characters-> USE BVA
3.username allows only alphabets and only . and _ are allowed  -> USE ECP

g)decision table based testing
-------------------------------
-This technique is used for functions which respond to a combination of inputs or events.
- If there are large input set of combinations, then divide it into smaller subsets which are helpful for managing a decision table.


Case#1:
In a registration page 
name, email and message are the text fields
Registration will proceed with valid data for name, email and message.

For example, a submit button should be enabled if the user has entered all required fields.


Refer diagram

      Name       email      message      RegisterButton
	   F           F            F            F 
	   T           F            F            F    
       F           T            F            F
	   F           F            T            F
	   T           T            F            F
	   T           F            T            F
	   F           T            T            F
	   T           T            T            T 
	   
	   
	   
CASE#2:
Req: 
- Get transaction with in 30 days
- From Time and toTime are optional
- From Time and toTime should be within 30 days

       NoInput   From Time <30   toTime>30
Data 30    T          T           F
Data>30    F          F           F

   
CASE#2:
Req: 
- Page fetches only last 30 days data 
- From Time and toTime are optional
- From Time and toTime should be within 30 days


1.If data exists within 30 days 
Todays date : June 1st

   fromDate   toDate             Result
     empty     empty           fetch  lst 30 days data 
	 
	 empty     may 30          fetch last 30 days info        
     empty     may 15          fetch from may 1st to may 15 
	 empty     jan 1           no data 
	 empty     Jun 20          Invalid date
	 
	 may 1      empty          fetch last 30 days info
	 may 15     empty          fetch may 15 to may 30 
	 jan 1      empty          fetch last 30 days info
	 Jun 20     empty          Invalid date
	 
	 may 1      may 30          fetch last 30 days info  
	 may 10     may 20          fetch may 10 to may 20
	 jan 1      may 30          fetch last 30 days info  
     jan 1      jan 30          no data 	 
	 
	 may 20     june 20         invalid date 
	 june 20    dec 30          invalid date 
	 dec 30     june 20         invaid date 

2.If data doesnt exists within 30 days 

   fromDate   toDate             Result
     empty     empty            no data 
	 
	 empty     may 30          no data         
     empty     may 15          no data 
	 empty     jan 1           no data 
 
	 
	 may 1      empty           no data 
	 may 15     empty           no data 
	 jan 1      empty           no data 
 
	 
	 may 1      may 30           no data  
	 may 10     may 20           no data 
	 jan 1      may 30          no data  
     jan 1      jan 30          no data 	 
 
  
steps:
Enlist the inputs in rows
Enter all the rules in the column
Fill the table with the different combination of inputs
In the last row, note down the output against the input combination.

used when we have multi events/combinations in a requirement.

CASE#3: 
In a login page 
- Username has to be  10 chars,only alphabets
- password has to be 8 chars, only alphabets
- if UserName & password both are valid then login is success.
Use BVA + ECP + Decision tree

SYNTAX CORRECT: 

F - False   
T - True   

v= Valid
I = Invalid


un          pwd        result
------------------------------
(<10)      (<8)        FAIL
(<10)      (=8)        FAIL
(=10)      (<8)        FAIL
(=10)+V    (=8)+I      FAIL
(=10)+I    (=8)+V/I    FAIL
(=10)+V    (=8)+V      PASS



state transition:
------------------
-> in a single flow the state changes based on input/usertype.
-> test the state changes as expected.

In State Transition technique changes in input conditions change the state of the Application Under Test (AUT). 
This testing technique allows the tester to test the behavior of an AUT. 

The tester can perform this action by entering various input conditions in a sequence. 

In State transition technique, 
the testing team provides positive as well as negative input test values for evaluating the system behavior.

ex:
1. one person can add only one product during Flipkart sale.

Before adding: Eligible
After adding : Not eligible

 Test cases:
  1.Add product when nothing in cart.     -> Pass
     state changes from 'Eligible' to 'Not Eligible'
  2.Try to Add product when one product in cart   -> Fail
  3.Remove the product from cart
       state changes from 'Not Eligible' to 'Eligible'
  4.Try to Add product when nothing in cart.   -> pass
   state changes from 'Eligible' to 'Not Eligible'
  5.Try to Add product  when customer already purchased the product - > Fail
  
2.After 30 days don't access the features as Licence expired.

States:
Not Expired
Expired

Test cases:
1.Test all the features within 30 days [curr state is Not Expired ]  -> Pass
2.Test all the features after 30 days  [curr state is  Expired ]  -> Fail

3.LoggedinUser vs Loggedout user
Ex:
purchase product in amazon 
access product -> both
add to cart -> both
purchase -> only loggedin user can purchase.


4. privilege customer vs normal customer.
-Access amazon prime content without subscription.
-same normal customer make payment for subscription.
and Access amazon prime content with subscription.


Example:
if the user enters a valid password in any of the first three attempts 
the user will be able to log in successfully.

If the user enters valid username but  invalid password in the first or second try, 
the user will be prompted to re-enter the password. 
When the user enters password incorrectly 5th time, 
the action has taken, and the account will be blocked.
ACTIVE ---> BLOCKED.

S.No	Action	Username	Password	Status
1	Attempt#1	T	          F         ACTIVE
2	Attempt#2	T	          F	        ACTIVE
3	Attempt#3	T	          F	        ACTIVE
4	Attempt#4	T	          F	        ACTIVE
5	Attempt#5	T	          F	        BLOCKED
6	Attempt#5	T	          T        LOGIN FAILS


Internationalization  testing:
----------------------------
-> app that supports multi languages.
Test the application to support the page in diff language.
-> currency change based on nation
-> date + local information has to be tested.
-> locality testing
localization testing 
(testing particular location )
ex:book a cab
 
1.currency change
2.change the date + time format
3.collect voter id for indians
collect ssn for us
	







 




