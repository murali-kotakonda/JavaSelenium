when do you created defect:
--------------------
when the expected and actual are not matching 

Every defect created by tester should contain:
-----------------------------------------------------------
- detailed steps to be followed for reproducing the issue 
Additional information to reproduce the issue, e.g. server, browser version, operating system, ...
- what is expected and what is the actual from application.
- priority (high/medium/low/very high)
- Enviroment (sandbox/commit/live).
- which browser 
- what is the request data used in the scenario.
- Log statements.

Where should we create defect or what is the defect tracking tool?
JIRA

  
- Every defect has a state

States:
---------
-> New (Defect created by tester with details...)

-> Open :
Scrum master assign the defect to any of the developer.
Assigning to developer and start analysis. or atleast the RCA [Root cause analysis].
if the defect is invalid then mark as Reject/Duplicate/Not Reproduable.

-> Author action [clarification required]:
info provided by tester is not sufficient.
dev needs additional info .
then defect falls under tester place 

-> Dev close /Fixed : 
 - When developer makes necessary code changes and verifies the fix is addressed 
   then he will make defect status as "Fixed" and the defect is passed to testing team.
   developer need to inform when the new changes will be available.,
  
  
-> Retesting:
Re-testing has to be done testers end.
try to execute the same test case and check if the issue is addressed.
try to run the regression and check the fix is not breaking other features.

-> Reopen
 If the defect still exists even after the bug is fixed by the developer, the tester changes
the status to "Reopened" and the defect is passed to dev team.

-> Reject/Duplicate/Consultation/Not Reproduable


-> Closed
Once the bug is fixed and it is tested by the tester.
Closed  means that the bug is fixed, tested and approved.



-> In-progress :
Defect is accepted and dev chages are in progress.


-> Test completed/Verified
Mark as Test completed when the testings are completed and successfull.
check if the new test case has to be written or not.


What is Priority?
Priority is defined as a parameter that decides the order in which a defect should be fixed. Defects having a higher priority should be fixed first. 
-Priority is divided into 3 categories:
Low
Medium
High 


What is Severity?
Severity is defined as the extent to which a particular defect can create an impact on the software. Severity is a parameter to denote the implication and the impact of the defect on the functionality of the software. 

-A higher effect of the bug on system functionality will lead to a higher severity level.
-A QA engineer determines the severity level of a bug.
-Severity is divided into 4 categories:
Critical
Major
Medium
Low



1.Low priority-Low severity – 
A spelling mistake in a page not
frequently navigated by users.
2. Low priority-High severity – 
Application crashing in some very
corner cases.
3. High priority-Low severity 
– Slight change in logo color or
spelling mistake in the company name.
4. High priority-High severity 
– Issue with login functionality.



 User interface defects – Low
 Boundary-related defects – Medium
 Error handling defects – Medium
 Calculation defects – High
 Misinterpreted data – High
 Hardware failures – High
 Compatibility issues – High
 Control flow defects – High
 Load conditions – High


1. High Severity High Priority: Consider an example of a web application where the if after filling in the login details, the user cannot click the login button then this is the case of high severity and high priority.

High Severity: If the login button is not clickable then the whole application is blocked and none of the functions can be accessed by the user
High Priority: If the login button is not clickable this means that the application is not letting any user log in then what is the use of such an application? Such defects are high-priority defects as the users will avoid such applications and businesses will be impacted.

2. High Severity Low Priority: Consider the example of the application being used on the older versions of Internet Explorer say IE8. This is a case of high severity and low priority.

High Severity: The fault, in this case, is of high severity because when the application is accessed on the older version, the page will not load properly and a few fields and text will be overlapped thus whole application will be impacted.
Low Priority: The defect is of low priority because very few actual users use IE8 or older versions so the fix can wait.

3. Low Severity Low Priority: Consider the example of the help or faq section of the website where the theme or font style of a section of the page does not match with that of the rest of the page.

Low Severity: The defect is of low severity as the defect is not affecting the website functionality.
Low Priority: The defect is of low priority as not many users will access this particular section of the website so the fix can wait.

4. Low Severity High Priority: Consider the example when there is a typo on the website. For example, the case of the school website where the ‘Admission Form’ is misspelled as ‘Admission Form’. 

Low Severity: The defect is of low severity because functionality-wise there is no issue.
High Priority: The defect is of high priority since it is related to business and needs to be fixed as soon as possible.

JIRA:
-----------
1.Creating EPIC
2.Creating user story
3.creating task 
4.creating defects 

Agile is managed using the JIRA tool. 
  
